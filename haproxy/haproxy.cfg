#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   https://www.haproxy.org/download/2.3/doc/configuration.txt
#   https://cbonte.github.io/haproxy-dconv/2.3/configuration.html
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    #log         127.0.0.1 local2 # send logs to Syslog server listening on 127.0.0.1 via the standard, user-defined Syslog facility local2
    log stdout format raw daemon debug

    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    # daemon

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

    stats socket /var/run/haproxy.sock user haproxy group haproxy mode 660 level admin expose-fd listeners

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option http-server-close
    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s # retry interval if TCP connection can't be established to a backend server
    timeout client          1m # the maximum inactivity time on the client, how long to wait before disconnecting the client
    timeout server          1m # the maximum inactivity time on the server, how long to wait for a response from the backend server
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000

cache apicache
    total-max-size 4095   # MB
    max-object-size 10000 # bytes
    max-age 30            # seconds

listen  stats
        bind *:1337
        stats enable
        stats uri /

#---------------------------------------------------------------------
# example how to define user and enable Data Plane API on tcp/5555
# more information: https://github.com/haproxytech/dataplaneapi and
#   https://www.haproxy.com/documentation/hapee/2-0r1/configuration/dataplaneapi/
#---------------------------------------------------------------------
userlist haproxy-dataplaneapi
    user admin insecure-password adminpwd

program api
   command /usr/bin/dataplaneapi --host 0.0.0.0 --port 5555 --haproxy-bin /usr/sbin/haproxy --config-file /usr/local/etc/haproxy/haproxy.cfg --reload-cmd "kill -SIGUSR2 1" --reload-delay 5 --userlist haproxy-dataplaneapi
   no option start-on-reload

#---------------------------------------------------------------------
# main frontend which proxys to the backends
#---------------------------------------------------------------------
frontend  main
    bind *:80
    # bind *:443 ssl # To be completed ....
    option http-use-htx
    http-request use-service prometheus-exporter if { path /metrics }

    acl url_static       path_beg       -i /static /images /javascript /stylesheets
    acl url_static       path_end       -i .jpg .gif .png .css .js

    # use_backend static          if url_static
    default_backend             app
    # Set up stick table to track request rates
    stick-table type binary len 8 size 1m expire 10s store http_req_rate(10s)

    # Track client by base32+src (Host header + URL path + src IP)
    http-request track-sc0 base32+src

    # Check map file to get rate limit for path
    http-request set-var(req.rate_limit)  path,map_beg(/etc/haproxy/maps/rates.map)

    # Client's request rate is tracked
    http-request set-var(req.request_rate)  base32+src,table_http_req_rate(main)

    # Subtract the current request rate from the limit
    # If less than zero, set rate_abuse to true
    acl rate_abuse var(req.rate_limit),sub(req.request_rate) lt 0    

    # Deny if rate abuse
    http-request deny deny_status 429 if rate_abuse

#---------------------------------------------------------------------
# static backend for serving up images, stylesheets and such
#---------------------------------------------------------------------
# backend static
#     balance     roundrobin
#     server      static1 127.0.0.1:4331 check
#     server      static2 127.0.0.1:4332 check

#---------------------------------------------------------------------
# round robin balancing between the various backends
#---------------------------------------------------------------------
backend app
    default-server maxconn 30  check  observe layer7  error-limit 2  on-error mark-down  inter 2s  rise 10  slowstart 5s
    mode    http
    http-request cache-use apicache
    http-response cache-store apicache
    http-response set-header X-Cache-Status HIT if !{ srv_id -m found }
    http-response set-header X-Cache-Status MISS if { srv_id -m found }
    balance roundrobin
    server  msgraphapi1 msgraphapi1:4000 
    server  msgraphapi2 msgraphapi2:4000